import dotenv from 'dotenv';
import path from 'path';
import multer from 'multer'; // Importez Multer
import fs from 'fs';
import Photo from '../src/models/Photo.js'; // Importez le mod√®le Photo

// Synchronisation de la base de donn√©es
sequelize.sync({ force: false }) // `force: false` pour ne pas √©craser les tables existantes
  .then(() => {
    console.log('‚úÖ Base de donn√©es synchronis√©e (tables recr√©√©es)');
  })
  .catch((err) => {
    console.error('Erreur lors de la synchronisation de la base de donn√©es :', err);
  });

const uploadsDir = path.resolve('uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir);
  console.log('‚úÖ Dossier uploads cr√©√©');
}

const envPath = path.resolve('backend/.env'); // Sp√©cifie explicitement le chemin
dotenv.config({ path: envPath });
console.log("Chemin du fichier .env :", envPath);

// V√©rifier si le fichier existe
if (!fs.existsSync(envPath)) {
  console.error("‚ö†Ô∏è Le fichier .env n'existe pas !");
} else {
  console.log("‚úÖ Le fichier .env a √©t√© trouv√© !");
}

console.log("Valeur de JWT_SECRET apr√®s chargement :", process.env.JWT_SECRET);

// Importer les mod√®les et les relations
import { User, Category, Expense, Budget, Report } from './models/index.js'; // Assurez-vous que ce fichier existe

import express from 'express'; // Importe Express
import cors from 'cors'; // Importe CORS pour autoriser les requ√™tes cross-origin
import sequelize from './config/db.js'; // Importe la configuration de la base de donn√©es
import authRoutes from './routes/authRoutes.js'; // Importe les routes d'authentification
import expenseRoutes from './routes/expenseRoutes.js'; // Importez les routes des d√©penses
import categoryRoutes from './routes/categoryRoutes.js';
import budgetRoutes from './routes/budgetRoutes.js';
import reportRoutes from './routes/reportRoutes.js';
import photoRoutes from './routes/photoRoutes.js';
import bankCardRoutes from './routes/bankCardRoutes.js';

const app = express(); // Cr√©e une instance d'Express
const PORT = process.env.PORT || 3000; // D√©finit le port du serveur

// Configuration de Multer pour g√©rer les fichiers
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/'); // Dossier o√π les fichiers seront stock√©s
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname); // Nom unique pour le fichier
  },
});
const upload = multer({ storage });

// Middleware
app.use(cors({
  origin: '*', // Accepte les requ√™tes depuis n'importe quel domaine
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json()); // Permet √† Express de parser le JSON

app.use((req, res, next) => {
  console.log(`üîç Requ√™te re√ßue : ${req.method} ${req.url}`);
  next();
});

// Routes
app.use('/api/auth', authRoutes); // Utilise les routes d'authentification
app.use('/api/expenses', expenseRoutes); // Utilisez les routes des d√©penses
app.use('/api/categories', categoryRoutes);
app.use('/api/budgets', budgetRoutes);
app.use('/api/reports', reportRoutes);
app.use('/api/photos', photoRoutes);
app.use('/api/bank-cards', bankCardRoutes);

app.post('/api/upload-photo', upload.single('photo'), async (req, res) => {
  try {
    console.log("üì∏ Fichier re√ßu :", req.file);
    console.log("üìÇ Donn√©es re√ßues :", req.body);

    if (!req.file) {
      throw new Error("Aucun fichier re√ßu.");
    }

    const { userId } = req.body;
    if (!userId) {
      throw new Error("userId est manquant dans la requ√™te.");
    }

    const photoUrl = `/uploads/${req.file.filename}`;

    // V√©rifier si l'utilisateur existe
    const userExists = await User.findByPk(userId);
    if (!userExists) {
      throw new Error("L'utilisateur sp√©cifi√© n'existe pas.");
    }

    // Cr√©er l'entr√©e en base de donn√©es
    const photo = await Photo.create({ userId, photoUrl });

    console.log("‚úÖ Photo enregistr√©e :", photo);
    res.status(201).json({ message: 'Photo t√©l√©vers√©e avec succ√®s', photo });

  } catch (err) {
    console.error("‚ùå Erreur lors du t√©l√©versement :", err);
    res.status(500).json({ message: 'Erreur lors du t√©l√©versement', error: err.message });
  }
});


// Synchronisation de la base de donn√©es
sequelize.sync().then(() => {
  console.log('base de donnees synchronisee'); // Affiche un message lorsque la base de donn√©es est synchronis√©e
});

// D√©marre le serveur
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`); // Affiche un message lorsque le serveur d√©marre
});

async function testDB() {
  try {
    const users = await User.findAll();
    console.log("‚úÖ Utilisateurs r√©cup√©r√©s :", users);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des utilisateurs :", error);
  }
}

testDB();